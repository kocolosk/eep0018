This module strives to prepare an EEP0018 implemenation. It implements most of the 
functionality described there, with some additional features.  

Compiling
=========

Adjust the Makefile's top section. After that, run 

  ./configure

to compile everything. This results into

	./bin/eep0018_drv.so
	./bin/eep0018.beam.

Running
=======

The eep0018 module exports these functions:

*	start/0 starts the driver.
*	start/1 starts the driver; the parameter is the path to the eep0018_drv.so driver
	
*	stop/0 stops the driver.
	
*	json_to_term/1 parses a JSON text
*	json_to_term/2 parses a JSON text, with some options (See below).
	
*	term_to_json/1 creates a piece of JSON text.

Status/TODO
===========

Please consider this software as a ALPHA release! TODOs:

* Implement all missing json_to_term/2 options
* Add native {duplicate_labels,fails} and {duplicate_labels,raise} implementation.
* Add native {float,true} and {duplicate_labels,raise} implementation.

json_to_term/2 Options
======================

(*) .. default

{float,false(*)|true|intern}

	true: return all numbers as floats.
	false: return integers as integers, and floats as floats.
	intern: return numbers as {number:"string"} tuples. (not yet implemented)

{label,binary(*)|atom|existing_atom}

	The "label" option defines whether or not map keys in the returned terms
	are converted into an atom.
	
	binary: return map keys as binary
	atom: return map keys as an atom, if possible, as a binary otherwise.
	existing_atom: return map keys as an atom, if existing, as a binary otherwise.

	Note: the "existing_atom" option slows down things terribly, if the atoms don't exist.

{duplicate_labels,true(*)|false|raise}

	true: don't fix maps with duplicate entries
	false: remove duplicate entries from maps (not yet implemented)
	raise: raise an error on duplicate map entries (not yet implemented)

{parse,value|object}

	value: parse JSON values (i.e. "1")
	object: parse JSON objects. JSON values that are not objects raise an exception.

Note: The parameter set heavily influences the performance of the parser. The fastest
settings are:
 
	[{float,intern},{label,binary},{duplicate_labels,true},{parse,object}]

YAJL
====

The parsing engine that drives behind that module is YAJL, see http://lloydforge.org/projects/yajl/.
The source tree contains a copy of that library, currently at version 0.4.0.
 
Differences to EEP 18
=======================

EEP 18's json_to_term function defines parsing of JSON objects. As CouchDB
needs a JSON parser that is able to parse JSON values this implementation adds
this functionality.

Implemenation Status
====================

The current development is done on OS/X 10.5. Other OSes might need a tuned
Makefile.

Critical Discussion
===================

For a critical discussion of JSON <-> Erlang interaction see here:

	http://fullof.bs/prototype-eep-18-considered-harmful-the-problems-with-erlang-to-json-term-translation#more-402
	
	and
	
	http://sc.tri-bit.com/outgoing/scjson%20parser%20halp.html
